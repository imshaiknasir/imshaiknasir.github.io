---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
import Footer from '../../components/Footer.astro';
import { formatDate } from '../../utils/dateFormatter';
import { getCollection } from 'astro:content';

// Get all blog posts sorted by date
const posts = await getCollection('blog');
const sortedPosts = posts.sort((a, b) => {
  return new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime();
});

// Extract unique tags from all posts
const allTags = [...new Set(sortedPosts.flatMap(post => post.data.tags || []))];
---

<Layout title="Blog | Shaik Nasir Ahemad" description="Technical articles and insights on QA, automation testing, and software development">
  <Navigation />
  
  <main class="pt-28 pb-16 bg-gray-50">
    <div class="container mx-auto px-4 md:px-8 max-w-5xl">
      <!-- Blog header section -->
      <div class="text-center mb-16">
        <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-6 leading-tight">Technical Blog</h1>
        <p class="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
          My thoughts, insights, and learnings on QA automation, testing strategies, and software development.
        </p>
      </div>
      
      <!-- Featured post (if available) -->
      {sortedPosts.length > 0 && (
        <div class="mb-16">
          <a href={`/blog/${sortedPosts[0].slug}`} class="block group">
            <div class="bg-white rounded-xl shadow-md overflow-hidden transition transform hover:scale-[1.01] hover:shadow-lg">
              <div class="p-8 md:p-10">
                <div class="flex flex-wrap gap-2 mb-4">
                  {sortedPosts[0].data.tags?.slice(0, 3).map(tag => (
                    <span class="bg-primary/10 text-primary px-3 py-1 rounded-full text-sm font-medium">
                      {tag}
                    </span>
                  ))}
                </div>
                <h2 class="text-2xl md:text-3xl font-bold text-gray-900 mb-4 group-hover:text-primary transition-colors">
                  {sortedPosts[0].data.title}
                </h2>
                <p class="text-lg text-gray-600 mb-6 line-clamp-3">
                  {sortedPosts[0].data.description}
                </p>
                <div class="flex items-center justify-between">
                  <div class="flex items-center gap-3">
                    <div class="w-10 h-10 rounded-full bg-primary flex items-center justify-center text-white font-bold">
                      SN
                    </div>
                    <div>
                      <span class="block text-sm font-medium">Shaik Nasir</span>
                      <time datetime={sortedPosts[0].data.publishDate.toISOString()} class="text-sm text-gray-500">
                        {formatDate(sortedPosts[0].data.publishDate)}
                      </time>
                    </div>
                  </div>
                  <span class="text-primary font-medium flex items-center gap-1 group-hover:gap-2 transition-all">
                    Read post
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 group-hover:translate-x-1 transition-transform">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3" />
                    </svg>
                  </span>
                </div>
              </div>
            </div>
          </a>
        </div>
      )}
      
      <!-- Filter tags -->
      {allTags.length > 0 && (
        <div class="mb-12">
          <h2 class="text-xl font-bold mb-4">Filter by topic</h2>
          <div class="flex flex-wrap gap-2">
            {allTags.map(tag => (
              <button 
                class="filter-tag bg-white hover:bg-gray-100 border border-gray-200 px-4 py-2 rounded-full text-sm text-gray-700 transition"
                data-tag={tag}
              >
                {tag}
              </button>
            ))}
            <button 
              class="filter-tag bg-primary text-white hover:bg-primary/90 px-4 py-2 rounded-full text-sm transition"
              data-tag="all"
            >
              All posts
            </button>
          </div>
        </div>
      )}
      
      <!-- Blog post grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        {sortedPosts.length > 1 && sortedPosts.slice(1).map(post => (
          <article class="blog-card bg-white border border-gray-100 rounded-xl overflow-hidden shadow-sm hover:shadow-md transition-all hover:translate-y-[-2px]" data-tags={post.data.tags?.join(',') || ''}>
            <a href={`/blog/${post.slug}`} class="block h-full group">
              <div class="p-6">
                <div class="mb-3">
                  {post.data.tags && post.data.tags.length > 0 && (
                    <div class="flex flex-wrap gap-1 mb-4">
                      {post.data.tags.slice(0, 2).map(tag => (
                        <span class="bg-primary/10 text-primary px-2 py-0.5 rounded-full text-xs font-medium">
                          {tag}
                        </span>
                      ))}
                      {post.data.tags.length > 2 && (
                        <span class="bg-gray-100 px-2 py-0.5 rounded-full text-xs text-gray-700">
                          +{post.data.tags.length - 2}
                        </span>
                      )}
                    </div>
                  )}
                  <h2 class="text-xl font-bold text-gray-800 mb-3 line-clamp-2 group-hover:text-primary transition-colors">{post.data.title}</h2>
                  <p class="text-gray-600 mb-4 line-clamp-3">{post.data.description}</p>
                </div>
                <div class="flex justify-between items-center text-sm text-gray-500 pt-4 border-t border-gray-100">
                  <time datetime={post.data.publishDate.toISOString()}>
                    {formatDate(post.data.publishDate)}
                  </time>
                  <span>{post.data.minutesRead || 5} min read</span>
                </div>
              </div>
            </a>
          </article>
        ))}
      </div>
      
      {sortedPosts.length === 0 && (
        <div class="text-center py-16 bg-white rounded-xl shadow-sm">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-16 h-16 mx-auto text-gray-300 mb-4">
            <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" />
          </svg>
          <h2 class="text-2xl font-bold text-gray-800 mb-2">No posts found</h2>
          <p class="text-gray-600">Check back soon for new content!</p>
        </div>
      )}
    </div>
  </main>
  
  <Footer />
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const filterTags = document.querySelectorAll('.filter-tag');
    const blogCards = document.querySelectorAll('.blog-card');
    
    // Set initial active state
    const allTagButton = document.querySelector('[data-tag="all"]');
    if (allTagButton) {
      allTagButton.classList.add('bg-primary', 'text-white');
      allTagButton.classList.remove('bg-white', 'text-gray-700');
    }
    
    filterTags.forEach(tag => {
      tag.addEventListener('click', () => {
        const selectedTag = tag.getAttribute('data-tag');
        
        // Update active state of filter buttons
        filterTags.forEach(t => {
          if (t === tag) {
            t.classList.add('bg-primary', 'text-white');
            t.classList.remove('bg-white', 'bg-gray-100', 'text-gray-700', 'border-gray-200');
          } else {
            t.classList.remove('bg-primary', 'text-white');
            t.classList.add('bg-white', 'text-gray-700', 'border-gray-200');
          }
        });
        
        // Filter blog cards with animation
        blogCards.forEach(card => {
          const cardTags = card.getAttribute('data-tags')?.split(',') || [];
          
          if (selectedTag === 'all' || cardTags.includes(selectedTag)) {
            card.style.display = 'block';
            setTimeout(() => {
              card.style.opacity = '1';
              card.style.transform = 'translateY(0)';
            }, 50);
          } else {
            card.style.opacity = '0';
            card.style.transform = 'translateY(10px)';
            setTimeout(() => {
              card.style.display = 'none';
            }, 300);
          }
        });
      });
    });
  });
</script>

<style>
  .blog-card {
    transition: transform 0.3s ease, box-shadow 0.3s ease, opacity 0.3s ease;
  }
</style> 